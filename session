set mouse=
"============== Custom scripts/ plugin startup settings ===============

let g:startify_custom_header = [
      \ '   __      ___            ______ ____   ',
      \ '   \ \    / (_)           |____  |___ \ ',
      \ '    \ \  / / _ _ __ ___       / /  __) |',
      \ '     \ \/ / | | ''_ ` _ \     / /  |__ <',
      \ '      \  /  | | | | | | |   / /   ___) |',
      \ '       \/   |_|_| |_| |_|  /_(_) |____/ ',
      \ '',
      \ '',
      \ ]
let g:startify_list_order = ['files', 'dir', 'bookmarks', 'sessions']
let g:startify_bookmarks = ['~/git','~/git/360WebApp','~/git/360-Feedback']
let g:startify_session_dir = '~/.vim/session'
let g:nerdtree_tabs_open_on_gui_startup = 0

"============= Settings.vim ===============
set dict=/usr/share/dict/words
set t_Co=256
set term=screen-256color
set display=uhex
set shortmess=aAIsT
set cmdheight=2
set nowrap
let &scrolloff=999-&scrolloff
set smartcase

set completeopt=menu
set mousemodel=popup

set fillchars=vert:¦
set cc=+1,+2
set list listchars=tab:› ,trail:-,extends:>,precedes:<,eol:¬
set tags=./tags

set undofile
set undodir=~/vimundo/
set backup
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp

if has("clipboard")     " If the feature is available
  set clipboard=unnamed " copy to the system clipboard
endif

let mapleader=','

"easymotion
let g:EasyMotion_leader_key = ','
" Jump to anywhere with only `s{char}{target}`
" `s<CR>` repeat last find motion.

nmap <leader>s <Plug>(easymotion-s)
"
" Use uppercase target labels and type as a lower case
let g:EasyMotion_use_upper = 1
" type `l` and match `l`&`L`
let g:EasyMotion_smartcase = 1
" Smartsign (type `3` and match `3`&`#`)
let g:EasyMotion_use_smartsign_us = 1

" snipmate
let g:snipMate = {}
let g:snipMate.scope_aliases = {}

"synastic
let g:syntastic_enable_signs = 1
let g:syntastic_error_symbol = '✗'
let g:syntastic_warning_symbol = '⚠'
let g:syntastic_javascript_jshint_conf = '~/.vim/.jshintrc'
let g:syntastic_check_on_open = 1
"====================== Airline =========================
let g:airline_powerline_fonts = 1
let g:airline_theme             = 'solarized'
" let g:airline_theme             = 'bubblegum'
let g:airline_enable_branch     = 1
"
" vim-powerline symbols
let g:airline_left_sep          = ''
let g:airline_left_alt_sep      = '⮁'
let g:airline_right_sep         = '⮂'
let g:airline_right_alt_sep     = '⮃'
let g:airline_branch_prefix     = '⭠'
let g:airline_readonly_symbol   = '⭤'
let g:airline_linecolumn_prefix = '⭡'
let g:airline#extensions#syntastic#enabled = 0
let g:airline#extensions#tagbar#enabled = 1
let g:airline#extensions#ctrlp#show_adjacent_modes = 0

"Airline Whitespace

let g:airline#extensions#whitespace#enabled = 1
let g:airline#extensions#whitespace#symbol = '..'
let g:airline#extensions#whitespace#checks = [ 'indent', 'trailing' ]
let g:airline#extensions#whitespace#show_message = 0

"Tabline
let g:airline#extensions#tabline#left_sep = '⮀'
let g:airline#extensions#tabline#left_alt_sep = '⮁'
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_buffers = 0
let g:airline#extensions#tabline#tab_nr_type = 1 " tab number
let g:airline#extensions#tabline#tab_min_count = 1
let g:airline#extensions#tmuxline#enabled = 1

"======================= Mappings ==========================
" Unmap the arrow keys
no <down> <Nop>
no <left> <Nop>
no <right> <Nop>
no <up> <Nop>
ino <down> <Nop>
ino <left> <Nop>
ino <right> <Nop>
ino <up> <Nop>
vno <down> <Nop>
vno <left> <Nop>
vno <right> <Nop>
vno <up> <Nop>

"Beautifier mappings
autocmd FileType javascript noremap <buffer>  <c-f> :call JsBeautify()<cr>
" for html
autocmd FileType html noremap <buffer> <c-f> :call HtmlBeautify()<cr>
" for css or scss
autocmd FileType css noremap <buffer> <c-f> :call CSSBeautify()<cr>

"Snipmate mappings
imap <c-e> <esc>a<Plug>snipMateNextOrTrigger
nmap <c-e> <esc>a<Plug>snipMateNextOrTrigger
smap <c-e> <Plug>snipMateNextOrTrigger

"Spelling mapping
imap <c-l> <c-g>u<Esc>[s1z=`]a<c-g>u

"Ctrl+P mappings
let g:ctrlp_map = '<Leader>o'
let g:ctrlp_extensions = ['tag', 'buffertag', 'quickfix', 'dir', 'rtscript',
      \ 'undo', 'line', 'changes', 'mixed', 'bookmarkdir']

" map Silver Searcher
map <leader>a :Ag!<space>

" search for word under cursor with Silver Searcher
map <leader>A :Ag! "<C-r>=expand('<cword>')<CR>"

" solarized toggle mapping

nnoremap <F5> :ToggleBG<cr> :AirlineTheme solarized<cr>
"open current buffer in chrome or safari
" nnoremap <F5> :!open -a Safari %<CR><CR>
" nnoremap <s-F5> :!open -a Google\ Chrome %<CR><CR>

"run grunt karma
nnoremap <c-t> :Grunt karma<CR>
"
"collapse Nerdtree
map <F2> :NERDTreeTabsToggle<CR>

"Vimdiff mappings
nnoremap <leader>d :Gdiff<CR>
nnoremap <leader>dh :diffget //2 <CR>:diffupdate<CR>
nnoremap <leader>dt :diffget //3 <CR>:diffupdate<CR>
nnoremap <leader>dw :only <CR>:Gwrite<CR>

" tabpage mappings
nmap <Leader>l :tabnext<CR>
nmap <Leader>h :tabprev<CR>
nmap <Leader>q :tabclose<CR>

map <Leader>l :tabnext<CR>
map <Leader>h :tabprev<CR>
map <Leader>q :tabclose<CR>

nmap <Leader>t :tabnew %:h<CR>

save session
fun! WriteSession()
  let fname = fnamemodify('.', ':p:h:t') . "_" . strftime("%d%m%Y_%H:%M") . "_".expand("%:t")
  silent exe ":mksession ~/.vim/session/" . fname
  echo "Wrote ~/.vim/session/" . fname
endfun

map <leader>m :call WriteSession()<cr>

"custom comma motion mapping
nmap di, f,dT,
nmap ci, f,cT,
nmap da, f,ld2F,i,<ESC>l "delete argument 
nmap ca, f,ld7F,i,<ESC>a "delete arg and insert


" Use ranger as vim file manager
fun! Ranger()
  let tmpfile = tempname() 
  if a:0 > 0 && a:1 != "" 
    let dir = a:1 
  elseif expand("%") 
    let dir = "." 
  else 
    let dir = expand("%:p:h") 
  endif 
  exe 'silent !ranger --choosefile='.tmpfile dir 
  if filereadable(tmpfile) 
    exe 'edit' readfile(tmpfile)[0] 
    call delete(tmpfile) 
  endif 
  redraw! 
endfun

nmap <leader>r :call Ranger()<cr>
nmap <leader>rt :tabnew<cr>:call Ranger()<cr>

"awesomeness make jj in insertmode escape to normal. never press <esc> again!
inoremap jj <Esc>

" delete surrounding characters
noremap ds{ F{xf}x
noremap cs{ F{xf}xi
noremap ds" F"x,x
noremap cs" F"x,xi
noremap ds' F'x,x
noremap cs' F'x,xi
noremap ds( F(xf)x
noremap cs( F(xf)xi
noremap ds) F(xf)x
noremap cs) F(xf)xi

" upper or lowercase the current word
nmap g^ gUiW
nmap gv guiW

" diff
nmap ]c ]czz
nmap [c [czz

" default to very magic
no / /\v

let g:multi_cursor_quit_key='<Esc>'

" gO to create a new line below cursor in normal mode
nmap go o<ESC>k
" go to create a new line above cursor
nmap gO O<ESC>j

"I really hate that things don't auto-center
nmap G Gzz
nmap n nzz
nmap N Nzz
nmap } }zz
nmap { {zz

"open tag in new tab
map <C-\> :tab split<CR>:exec("tag ".expand("<cword>"))<CR>

"quick pairs
imap <leader>' ''<ESC>i
imap <leader>" ""<ESC>i
imap <leader>( ()<ESC>i
imap <leader>[ []<ESC>i


" Make Y behave like other capital commands.
" Hat-tip http://vimbits.com/bits/11
nnoremap Y y$

" Just to beginning and end of lines easier. From http://vimbits.com/bits/16
noremap H ^
noremap L $

" Use ; for : in normal and visual mode, less keystrokes
nnoremap ; :
vnoremap ; :

" Open vimrc with leader->v
nmap <leader>v  :tabedit ~/.vimrc.local<cr>
nmap <leader>vb :tabedit ~/.vimrc.bundles.local<cr>

" Open gvimrc with leader->gv
nmap <leader>gv  :tabedit ~/.gvimrc.local<cr>


" rename current file, via Gary Bernhardt
function! RenameFile()
  let old_name = expand('%')
  let new_name = input('New file name: ', expand('%'))
  if new_name != '' && new_name != old_name
    exec ':saveas ' . new_name
    exec ':silent !rm ' . old_name
    redraw!
  endif
endfunction
map <leader>n :call RenameFile()<cr>
"
"=================== You complete me options ==============
"set omnifunc=syntaxcomplete#Complete
let g:ycm_add_preview_to_completeopt=0
let g:ycm_confirm_extra_conf=0
let g:ycm_collect_identifiers_from_comments_and_strings = 1
let g:ycm_collect_identifiers_from_tags_files = 1
set completeopt-=preview

" =============== colorscheme options ===============
let hour = strftime("%H") " Set the background light from 7am to 7pm
if 7 <= hour && hour < 17
  set background=light
else " Set to dark from 7pm to 7am
  set background=dark
endif
color solarized 

if &diff
  set wrap
  let g:solarized_diffmode='normal'
endif

